// import { sumHelper } from "./sumHelper";
import { IAccount, ITransactionDetails } from '@massalabs/wallet-provider';
import { SmartContractsClient } from '@massalabs/massa-web3';

function isIAccount(object: any): object is IAccount {
  return (
    object &&
    typeof object.address === 'function' &&
    typeof object.name === 'function' &&
    typeof object.providerName === 'function' &&
    typeof object.balance === 'function' &&
    typeof object.sign === 'function' &&
    typeof object.buyRolls === 'function' &&
    typeof object.sellRolls === 'function' &&
    typeof object.sendTransaction === 'function' &&
    typeof object.callSC === 'function'
  );
}

/** The following global variable and the next class should be in a dedicated file. */
let callSC: (address: string, funcName: string, binArguments: Uint8Array, maxCoin: bigint) => Promise<ITransactionDetails>;

/**
 * A class to call the blockchain.
 */
export class BlockchainCaller {
  /**
   * Constructor for the BlockchainCaller class.
   *
   * @param {Function} caller - The function to call the blockchain.
   */
  constructor(
    caller: (
      address: string,
      funcName: string,
      binArguments: Uint8Array,
      maxCoin: bigint
    ) => Promise<ITransactionDetails>
  ) {
    if (!caller) {
      throw new Error('A caller function must be provided');
    }
    callSC = caller;
  }

  /**
   * Calls a smart contract on the blockchain with the provided parameters.
   *
   * @param {string} address - The blockchain address to call.
   * @param {string} funcName - The name of the function to call.
   * @param {Uint8Array} binArguments - The binary arguments for the function call.
   * @param {bigint} maxCoin - The maximum coin value.
   *
   * @return {Promise<string>} - A promise that resolves to a string.
   */
  static async call(
    address: string,
    funcName: string,
    binArguments: Uint8Array,
    maxCoin: bigint
  ): Promise<string> {
    if (!callSC) {
      throw new Error('callSC is not defined. You must create an instance of BlockchainCaller before using the static call method.');
    }

    const txDetails: ITransactionDetails = await callSC(
      address,
      funcName,
      binArguments,
      maxCoin
    );

    //TODO extract response from smart-contract-events if any

    //otherwise return an empty string
    return '';
  }
}

/**
 * This method have been generated by the Massa Proto CLI.
 * It allows you to call the "sum" function of the
 * "Paste your contract address here" Smart Contract.
 *
 * @remarks
 * To work properly, you need to run 'npm install @protobuf-ts/plugin' in your project folder.
 * Otherwise, this caller will not work.
 *
 * @param {uint64} num -
 * @param {string} value -
 * @param {fixed32} bleu -
 *
 * @returns {string} The result of the "sum" function.
 */
export async function sum(
  num: bigint,
  value: string,
  bleu: number,
  coins: bigint,
): Promise<string> {
  // Verify that the given arguments are valid
  if (num < 0)
    throw new Error(
      'Invalid argument: num cannot be negative according to protobuf file.',
    );
  if (bleu < 0)
    throw new Error(
      'Invalid argument: bleu cannot be negative according to protobuf file.',
    );

  // Serialize the arguments
  const serializedArgs = sumHelper.toBinary({
    num: num,
    value: value,
    bleu: bleu,
  });

  // Send the operation to the blockchain and retrieve its outputs
  return await callSC(
    'Paste your contract address here',
    'sum',
    serializedArgs,
    coins,
  );
}
