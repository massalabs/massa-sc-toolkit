// import { sumHelper } from "./sumHelper";
import { IAccount, ITransactionDetails } from '@massalabs/wallet-provider';
import { SmartContractsClient } from '@massalabs/massa-web3';

function isIAccount(object: any): object is IAccount {
  return (
    object &&
    typeof object.address === 'function' &&
    typeof object.name === 'function' &&
    typeof object.providerName === 'function' &&
    typeof object.balance === 'function' &&
    typeof object.sign === 'function' &&
    typeof object.buyRolls === 'function' &&
    typeof object.sellRolls === 'function' &&
    typeof object.sendTransaction === 'function' &&
    typeof object.callSC === 'function'
  );
}

class BlockchainCaller {
  private account: IAccount | SmartContractsClient;

  constructor(account: IAccount | SmartContractsClient) {
    this.account = account;
  }

  async callback(
    address: string,
    funcName: string,
    binArguments: Uint8Array,
    maxCoin: bigint,
  ): outputData {
    if (isIAccount(this.account)) {
      // call the Smart Contrat
      const txDetails: ITransactionDetails = await this.account.callSC(
        address,
        funcName,
        binArguments,
        maxCoin,
      );

      // Retrieve the events and outPuts from the operation ID
      const outputData: outputData = await getOutput(txDetails.operationId);
      return outputData;
    } else if (this.account instanceof SmartContractsClient) {
      // TODO
    } else {
      throw new Error('Invalid provider.');
    }
  }
}

/**
 * This method have been generated by the Massa Proto CLI.
 * It allows you to call the "sum" function of the
 * "Paste your contract address here" Smart Contract.
 *
 * @remarks
 * To work properly, you need to run 'npm install @protobuf-ts/plugin' in your project folder.
 * Otherwise, this caller will not work.
 *
 * @param {uint64} num -
 * @param {string} value -
 * @param {fixed32} bleu -
 *
 * @returns {string} The result of the "sum" function.
 */
export async function sum(
  num: bigint,
  value: string,
  bleu: number,
  coins: bigint,
): Promise<string> {
  // Verify that the given arguments are valid
  if (num < 0)
    throw new Error(
      'Invalid argument: num cannot be negative according to protobuf file.',
    );
  if (bleu < 0)
    throw new Error(
      'Invalid argument: bleu cannot be negative according to protobuf file.',
    );

  // Serialize the arguments
  const serializedArgs = sumHelper.toBinary({
    num: num,
    value: value,
    bleu: bleu,
  });

  // Send the operation to the blockchain and retrieve its outputs
  return await callSC(
    'Paste your contract address here',
    'sum',
    serializedArgs,
    coins,
  );
}
